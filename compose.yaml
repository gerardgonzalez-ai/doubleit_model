# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

version: '3.8'  # Specifies the Docker Compose version;

services:
  server:
    build:
      context: .  # Build context; tells Docker where to find the Dockerfile
      dockerfile: Dockerfile  # Specifies the name of the Dockerfile; this is optional if the file is named 'Dockerfile'
    ports:
      - "8000:8000"  # Maps port 8000 of the container to port 8000 on the machine
    volumes:
      - ./app:/app  # Mounts the 'app' directory on the machine to the '/app' directory in the container; useful for development
      - ./model:/app/model  # Mounts the 'model' directory on the machine to the '/app/model' directory in the container; useful for development
    environment:
     - UVICORN_CMD=uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload # Command to run FastAPI with Uvicorn; '--reload' is useful for development

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

